{
  "actorSpecification": 1,
  "name": "skcris-scraper",
  "title": "SKCRIS Scraper",
  "description": "Extract Slovak research organisations, projects, employees, and data on their equipment, services, outputs, and more.",
  "version": "1.0",
  "dockerfile": "./Dockerfile",
  "input": {
    "schemaVersion": 1,
    "title": "SKCRIS Scraper",
    "description": "Configure the SKCRIS Scraper. <br/><br/>\n      <strong>NOTE:</strong> Either <strong>Dataset type</strong> or\n      <strong>Start URLs</strong> must be given.",
    "type": "object",
    "properties": {
      "datasetType": {
        "type": "string",
        "title": "Dataset type",
        "description": "Use this option if you want to scrape a whole dataset,\n        not just specific URLs.<br/><br/>\n        This option is ignored if <strong>Start URLs:</strong> are given",
        "editor": "select",
        "example": "organisations",
        "default": "organisations",
        "prefill": "organisations",
        "enum": [
          "researchers",
          "projects",
          "organisations"
        ],
        "enumTitles": [
          "Researchers",
          "Projects",
          "Organisations"
        ],
        "nullable": true
      },
      "entryIncludeLinkedResources": {
        "title": "Include linked resources",
        "type": "boolean",
        "description": "If checked, the scraper will obtain more detailed info by downloading\n        linked resources (e.g. org's researchers, org's projects, ...).<br/><br/>\n        If un-checked, only the data from the detail page is extracted.<br/><br/>\n        Note 1: This is a different type of data than what is scraped from individual entries,\n        as this data describes the <strong>relationships</strong>.<br/><br/>\n        Note 2: This dramatically increases the running time (full dataset takes days, up to a week).<br/>\n        Consider that the whole DB has more than 500,000 entries of all kinds.<br/>\n        Whichever dataset you choose, the downloaded entries WILL have relationships\n        to those 500k entries.<br/><br/>\n        For details, please refer to https://apify.com/jurooravec/skcris-scraper#output",
        "example": true,
        "default": false
      },
      "listingFilterFirstLetter": {
        "type": "string",
        "title": "Filter by first letter",
        "description": "If set, only entries starting with this letter will be extracted.<br/><br/>\n        <strong>NOTE:</strong> Only characters A-Z are supported. Letters with diacritics (eg Á), can be\n        found under the base character (eg A).",
        "editor": "select",
        "example": "a",
        "enum": [
          "a",
          "b",
          "c",
          "d",
          "e",
          "f",
          "g",
          "h",
          "i",
          "j",
          "k",
          "l",
          "m",
          "n",
          "o",
          "p",
          "q",
          "r",
          "s",
          "t",
          "u",
          "v",
          "w",
          "x",
          "y",
          "z"
        ],
        "nullable": true
      },
      "listingFilterRegion": {
        "type": "string",
        "title": "Filter by region (kraj)",
        "description": "If set, only entries within this region will be extracted.",
        "editor": "select",
        "example": "bratislava",
        "enum": [
          "bratislava",
          "trnava",
          "trencin",
          "nitra",
          "zilina",
          "banskabystrica",
          "presov",
          "kosice",
          "zahranicie"
        ],
        "enumTitles": [
          "Bratislavský kraj",
          "Trnavský kraj",
          "Trenčiansky kraj",
          "Nitriansky kraj",
          "Žilinský kraj",
          "Banskobystrický kraj",
          "Prešovský kraj",
          "Košický kraj",
          "Zahraničie"
        ],
        "nullable": true
      },
      "listingItemsPerPage": {
        "title": "Results per page",
        "type": "integer",
        "description": "If set, this number of entries will be extracted per page.<br/><br/>\n        <strong>NOTE:</strong> Default is set to 500. This balances 1) slow server start-up time,\n        2) total server response time, 3) the risk of the request failure.",
        "default": 500,
        "prefill": 50,
        "example": 50,
        "minimum": 1,
        "nullable": true
      },
      "listingCountOnly": {
        "title": "Count the total matched results",
        "type": "boolean",
        "description": "If checked, no data is extracted. Instead, the count of matched results is printed in the log.",
        "default": false,
        "groupCaption": "Troubleshooting options",
        "groupDescription": "Use these to verify that your custom startUrls are correct",
        "nullable": true
      },
      "inputExtendUrl": {
        "title": "Extend Actor input from URL",
        "type": "string",
        "editor": "textfield",
        "description": "Extend Actor input with a config from a URL.<br/>\n    For example, you can store your actor input in a source control, and import it here.<br/>\n    In case of a conflict (if a field is defined both in Actor input and in imported input) the Actor input overwrites the imported fields.<br/>\n    The URL is requested with GET method, and must point to a JSON file containing a single object (the config).<br/>\n    If you need to send a POST request or to modify the response further, use `inputExtendFromFunction` instead.",
        "example": "https://raw.githubusercontent.com/jfairbank/programming-elm.com/master/cat-breeds.json",
        "nullable": true,
        "sectionCaption": "Programmatic Input (Advanced)",
        "sectionDescription": "With these options you can configure other Actor options programmatically or from remote source."
      },
      "inputExtendFromFunction": {
        "title": "Extend Actor input from custom function",
        "type": "string",
        "editor": "javascript",
        "description": "Extend Actor input with a config defined by a custom function.<br/>\n    For example, you can store your actor input in a source control, and import it here.<br/>\n    In case of a conflict (if a field is defined both in Actor input and in imported input) the Actor input overwrites the imported fields.<br/>\n    The function must return an object (the config).",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Load Actor config from GitHub URL (public)\n//   const config = await sendRequest.get('https://raw.githubusercontent.com/username/project/main/config.json').json();\n//   \n//   // Increase concurrency during off-peak hours\n//   // NOTE: Imagine we're targetting a small server, that can be slower during the day\n//   const hours = new Date().getUTCHours();\n//   const isOffPeak = hours < 6 || hours > 20;\n//   config.maxConcurrency = isOffPeak ? 8 : 3;\n//   \n//   return config;\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Load Actor config from GitHub URL (public)\n//   const config = await sendRequest.get('https://raw.githubusercontent.com/username/project/main/config.json').json();\n//   \n//   // Increase concurrency during off-peak hours\n//   // NOTE: Imagine we're targetting a small server, that can be slower during the day\n//   const hours = new Date().getUTCHours();\n//   const isOffPeak = hours < 6 || hours > 20;\n//   config.maxConcurrency = isOffPeak ? 8 : 3;\n//   \n//   return config;\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "startUrls": {
        "title": "Start URLs",
        "type": "array",
        "description": "List of URLs to scrape.",
        "editor": "requestListSources",
        "sectionCaption": "Starting URLs"
      },
      "startUrlsFromDataset": {
        "title": "Start URLs from Dataset",
        "type": "string",
        "editor": "textfield",
        "description": "Import URLs to scrape from an existing Dataset.<br/>\n    The dataset and the field to import from should be written as `{datasetID}#{field}`.<br/>\n    Example: `datasetid123#url` will take URLs from dataset `datasetid123` from field `url`.",
        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-]*#.+$",
        "example": "datasetid123#url",
        "nullable": true
      },
      "startUrlsFromFunction": {
        "title": "Start URLs from custom function",
        "type": "string",
        "description": "Import or generate URLs to scrape using a custom function.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Create and load URLs from a Dataset by combining multiple fields\n//   const dataset = await io.openDataset(datasetNameOrId);\n//   const data = await dataset.getData();\n//   const urls = data.items.map((item) => `https://example.com/u/${item.userId}/list/${item.listId}`);\n//   return urls;\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Create and load URLs from a Dataset by combining multiple fields\n//   const dataset = await io.openDataset(datasetNameOrId);\n//   const data = await dataset.getData();\n//   const urls = data.items.map((item) => `https://example.com/u/${item.userId}/list/${item.listId}`);\n//   return urls;\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "proxy": {
        "title": "Proxy configuration",
        "type": "object",
        "description": "Select proxies to be used by your crawler.",
        "editor": "proxy",
        "sectionCaption": "Proxy",
        "sectionDescription": "Configure the proxy"
      },
      "includePersonalData": {
        "title": "Include personal data",
        "type": "boolean",
        "description": "By default, fields that are potential personal data are censored. Toggle this option on to get the un-uncensored values.<br/>\n    <strong>WARNING:</strong> Turn this on ONLY if you have consent, legal basis for using the data, or at your own risk. <a href=\"https://gdpr.eu/eu-gdpr-personal-data/\">Learn more</a>",
        "default": false,
        "example": false,
        "nullable": true,
        "sectionCaption": "Privacy & Data governance (GDPR)"
      },
      "requestMaxEntries": {
        "title": "Limit the number of requests",
        "type": "integer",
        "description": "If set, only at most this many requests will be processed.<br/>\n      The count is determined from the RequestQueue that's used for the Actor run.<br/>\n      This means that if `requestMaxEntries` is set to 50, but the associated queue already handled 40 requests, then only 10 new requests will be handled.",
        "example": 50,
        "prefill": 50,
        "minimum": 0,
        "nullable": true,
        "sectionCaption": "Requests limit, transformation & filtering (Advanced)"
      },
      "requestTransform": {
        "title": "Transform requests",
        "type": "string",
        "description": "Freely transform the request object using a custom function.<br/>\n    If not set, the request will remain as is.",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n * `request` - Request holding URL to be scraped.\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async (request, { io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Tag requests\n//   // (maybe because we use RequestQueue that pools multiple scrapers)\n//   request.userData.tag = \"VARIANT_A\";\n//   return requestQueue;\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n * `request` - Request holding URL to be scraped.\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async (request, { io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Tag requests\n//   // (maybe because we use RequestQueue that pools multiple scrapers)\n//   request.userData.tag = \"VARIANT_A\";\n//   return requestQueue;\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "requestTransformBefore": {
        "title": "Transform requests - Setup",
        "type": "string",
        "description": "Use this if you need to run one-time initialization code before `requestTransform`.",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code BEFORE requests are processed.\n//   state.categories = await sendRequest.get('https://example.com/my-categories').json();\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code BEFORE requests are processed.\n//   state.categories = await sendRequest.get('https://example.com/my-categories').json();\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "requestTransformAfter": {
        "title": "Transform requests - Teardown",
        "type": "string",
        "description": "Use this if you need to run one-time teardown code after `requestTransform`.",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code AFTER requests are processed.\n//   delete state.categories;\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code AFTER requests are processed.\n//   delete state.categories;\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "requestFilter": {
        "title": "Filter requests",
        "type": "string",
        "description": "Decide which requests should be processed by using a custom function.<br/>\n    If not set, all requests will be included.<br/>\n    This is done after `requestTransform`.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n * `request` - Request holding URL to be scraped.\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async (request, { io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Filter requests based on their tag\n//   // (maybe because we use RequestQueue that pools multiple scrapers)\n//   return request.userData.tag === \"VARIANT_A\";\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n * `request` - Request holding URL to be scraped.\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async (request, { io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Filter requests based on their tag\n//   // (maybe because we use RequestQueue that pools multiple scrapers)\n//   return request.userData.tag === \"VARIANT_A\";\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "requestFilterBefore": {
        "title": "Filter requests - Setup",
        "type": "string",
        "description": "Use this if you need to run one-time initialization code before `requestFilter`.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code BEFORE requests are processed.\n//   state.categories = await sendRequest.get('https://example.com/my-categories').json();\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code BEFORE requests are processed.\n//   state.categories = await sendRequest.get('https://example.com/my-categories').json();\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "requestFilterAfter": {
        "title": "Filter requests - Teardown",
        "type": "string",
        "description": "Use this if you need to run one-time teardown code after `requestFilter`.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code AFTER requests are processed.\n//   delete state.categories;\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code AFTER requests are processed.\n//   delete state.categories;\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "requestQueueId": {
        "title": "RequestQueue ID",
        "type": "string",
        "description": "By default, requests are stored in the default request queue.\n    Set this option if you want to use a non-default queue.\n    <a href=\"https://docs.apify.com/sdk/python/docs/concepts/storages#opening-named-and-unnamed-storages\">Learn more</a><br/>\n    <strong>NOTE:</strong> RequestQueue name can only contain letters 'a' through 'z', the digits '0' through '9', and the hyphen ('-') but only in the middle of the string (e.g. 'my-value-1')",
        "editor": "textfield",
        "example": "mIJVZsRQrDQf4rUAf",
        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-]*$",
        "nullable": true
      },
      "outputMaxEntries": {
        "title": "Limit the number of scraped entries",
        "type": "integer",
        "description": "If set, only at most this many entries will be scraped.<br/>\n      The count is determined from the Dataset that's used for the Actor run.<br/>\n      This means that if `outputMaxEntries` is set to 50, but the associated Dataset already has 40 items in it, then only 10 new entries will be saved.",
        "example": 50,
        "prefill": 50,
        "minimum": 0,
        "nullable": true,
        "sectionCaption": "Output size, transformation & filtering (T in ETL) (Advanced)"
      },
      "outputRenameFields": {
        "title": "Rename dataset fields",
        "type": "object",
        "description": "Rename fields (columns) of the output data.<br/>\n    If not set, all fields will have their original names.<br/>\n    This is done before `outputPickFields`.<br/>\n    Keys can be nested, e.g. `\"someProp.value[0]\"`.\n    Nested path is resolved using <a href=\"https://lodash.com/docs/4.17.15#get\">Lodash.get()</a>.",
        "editor": "json",
        "example": {
          "oldFieldName": "newFieldName"
        },
        "nullable": true
      },
      "outputPickFields": {
        "title": "Pick dataset fields",
        "type": "array",
        "description": "Select a subset of fields of an entry that will be pushed to the dataset.<br/>\n    If not set, all fields on an entry will be pushed to the dataset.<br/>\n    This is done after `outputRenameFields`.<br/>\n    Keys can be nested, e.g. `\"someProp.value[0]\"`.\n    Nested path is resolved using <a href=\"https://lodash.com/docs/4.17.15#get\">Lodash.get()</a>.",
        "editor": "stringList",
        "example": [
          "fieldName",
          "another.nested[0].field"
        ],
        "nullable": true
      },
      "outputTransform": {
        "title": "Transform entries",
        "type": "string",
        "description": "Freely transform the output data object using a custom function.<br/>\n    If not set, the data will remain as is.<br/>\n    This is done after `outputPickFields` and `outputRenameFields`.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n * `entry` - Scraped entry.\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async (entry, { io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Add extra custom fields like aggregates\n//   return {\n//     ...entry,\n//     imagesCount: entry.images.length,\n//   };\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n * `entry` - Scraped entry.\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async (entry, { io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Add extra custom fields like aggregates\n//   return {\n//     ...entry,\n//     imagesCount: entry.images.length,\n//   };\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "outputTransformBefore": {
        "title": "Transform entries - Setup",
        "type": "string",
        "description": "Use this if you need to run one-time initialization code before `outputTransform`.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code BEFORE entries are scraped.\n//   state.categories = await sendRequest.get('https://example.com/my-categories').json();\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code BEFORE entries are scraped.\n//   state.categories = await sendRequest.get('https://example.com/my-categories').json();\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "outputTransformAfter": {
        "title": "Transform entries - Teardown",
        "type": "string",
        "description": "Use this if you need to run one-time teardown code after `outputTransform`.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code AFTER entries are scraped.\n//   delete state.categories;\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code AFTER entries are scraped.\n//   delete state.categories;\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "outputFilter": {
        "title": "Filter entries",
        "type": "string",
        "description": "Decide which scraped entries should be included in the output by using a custom function.<br/>\n    If not set, all scraped entries will be included.<br/>\n    This is done after `outputPickFields`, `outputRenameFields`, and `outputTransform`.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n * `entry` - Scraped entry.\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async (entry, { io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Filter entries based on number of images they have (at least 5)\n//   return entry.images.length > 5;\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n * `entry` - Scraped entry.\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async (entry, { io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Filter entries based on number of images they have (at least 5)\n//   return entry.images.length > 5;\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "outputFilterBefore": {
        "title": "Filter entries - Setup",
        "type": "string",
        "description": "Use this if you need to run one-time initialization code before `outputFilter`.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code BEFORE entries are scraped.\n//   state.categories = await sendRequest.get('https://example.com/my-categories').json();\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code BEFORE entries are scraped.\n//   state.categories = await sendRequest.get('https://example.com/my-categories').json();\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "outputFilterAfter": {
        "title": "Filter entries - Teardown",
        "type": "string",
        "description": "Use this if you need to run one-time teardown code after `outputFilter`.<br/>",
        "editor": "javascript",
        "example": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code AFTER entries are scraped.\n//   delete state.categories;\n//\n// };",
        "prefill": "\n/**\n * Inputs:\n *\n * `ctx.io` - Apify Actor class, see https://docs.apify.com/sdk/js/reference/class/Actor.\n * `ctx.input` - The input object that was passed to this Actor.\n * `ctx.state` - An object you can use to persist state across all your custom functions.\n * `ctx.sendRequest` - Fetch remote data. Uses 'got-scraping', same as Apify's `sendRequest`.\n *                       See https://crawlee.dev/docs/guides/got-scraping\n * `ctx.itemCacheKey` - A function you can use to get cacheID for current `entry`.\n *                        It takes the entry itself, and a list of properties to be used for hashing.\n *                        By default, you should pass `input.cachePrimaryKeys` to it.\n *\n */\n// async ({ io, input, state, sendRequest, itemCacheKey }) => {\n//   // Example: Fetch data or run code AFTER entries are scraped.\n//   delete state.categories;\n//\n//   /* ========== SEE BELOW FOR MORE EXAMPLES ========= */\n//\n//   /**\n//    * ======= ACCESSING DATASET ========\n//    * To save/load/access entries in Dataset.\n//    * Docs:\n//    * - https://docs.apify.com/platform/storage/dataset\n//    * - https://docs.apify.com/sdk/js/docs/guides/result-storage#dataset\n//    * - https://docs.apify.com/sdk/js/docs/examples/map-and-reduce\n//    */\n//   // const dataset = await io.openDataset('MyDatasetId');\n//   // const info = await dataset.getInfo();\n//   // console.log(info.itemCount);\n//   // // => 0\n//\n//   /**\n//    * ======= ACCESSING REMOTE DATA ========\n//    * Use `sendRequest` to get data from the internet:\n//    * Docs:\n//    * - https://github.com/apify/got-scraping\n//    */\n//   // const catFact = await sendRequest.get('https://cat-fact.herokuapp.com/facts/5887e1d85c873e0011036889').json();\n//   // console.log(catFact.text);\n//   // // => \"Cats make about 100 different sounds. Dogs make only about 10.\",\n//\n//   /**\n//    * ======= USING CACHE ========\n//    * To save the entry to the KeyValue cache (or retrieve it), you can use\n//    * `itemCacheKey` to create the entry's ID for you:\n//    */\n//   // const cacheId = itemCacheKey(item, input.cachePrimaryKeys);\n//   // const cache = await io.openKeyValueStore('MyStoreId');\n//   // cache.setValue(cacheId, entry);\n// };",
        "nullable": true
      },
      "outputDatasetId": {
        "title": "Dataset ID",
        "type": "string",
        "description": "By default, data is written to Default dataset.\n    Set this option if you want to write data to non-default dataset.\n    <a href=\"https://docs.apify.com/sdk/python/docs/concepts/storages#opening-named-and-unnamed-storages\">Learn more</a><br/>\n    <strong>NOTE:</strong> Dataset name can only contain letters 'a' through 'z', the digits '0' through '9', and the hyphen ('-') but only in the middle of the string (e.g. 'my-value-1')",
        "editor": "textfield",
        "example": "mIJVZsRQrDQf4rUAf",
        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-]*$",
        "nullable": true,
        "sectionCaption": "Output Dataset & Caching (L in ETL) (Advanced)"
      },
      "outputCacheStoreId": {
        "title": "Cache ID",
        "type": "string",
        "description": "Set this option if you want to cache scraped entries in <a href=\"https://docs.apify.com/sdk/js/docs/guides/result-storage#key-value-store\">Apify's Key-value store</a>.<br/>\n    This is useful for example when you want to scrape only NEW entries. In such case, you can use the `outputFilter` option to define a custom function to filter out entries already found in the cache.\n    <a href=\"https://docs.apify.com/sdk/python/docs/concepts/storages#working-with-key-value-stores\">Learn more</a><br/>\n    <strong>NOTE:</strong> Cache name can only contain letters 'a' through 'z', the digits '0' through '9', and the hyphen ('-') but only in the middle of the string (e.g. 'my-value-1')",
        "editor": "textfield",
        "example": "mIJVZsRQrDQf4rUAf",
        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-]*$",
        "nullable": true
      },
      "outputCachePrimaryKeys": {
        "title": "Cache primary keys",
        "type": "array",
        "description": "Specify fields that uniquely identify entries (primary keys), so entries can be compared against the cache.<br/>\n    <strong>NOTE:</strong> If not set, the entries are hashed based on all fields",
        "editor": "stringList",
        "example": [
          "name",
          "city"
        ],
        "nullable": true
      },
      "outputCacheActionOnResult": {
        "title": "Cache action on result",
        "type": "string",
        "description": "Specify whether scraped results should be added to, removed from, or overwrite the cache.<br/>\n    - <strong>add<strong> - Adds scraped results to the cache<br/>\n    - <strong>remove<strong> - Removes scraped results from the cache<br/>\n    - <strong>set<strong> - First clears all entries from the cache, then adds scraped results to the cache<br/>\n    <strong>NOTE:</strong> No action happens when this field is empty.",
        "editor": "select",
        "enum": [
          "add",
          "remove",
          "overwrite"
        ],
        "example": "add",
        "nullable": true
      },
      "maxRequestRetries": {
        "title": "maxRequestRetries",
        "type": "integer",
        "description": "Indicates how many times the request is retried if <a href=\"https://crawlee.dev/api/basic-crawler/interface/BasicCrawlerOptions#requestHandler\">BasicCrawlerOptions.requestHandler</a> fails.",
        "example": 3,
        "prefill": 10,
        "minimum": 0,
        "nullable": true,
        "sectionCaption": "Crawler configuration (Advanced)",
        "sectionDescription": "These options are applied directly to the Crawler. In majority of cases you don't need to change these. See https://crawlee.dev/api/basic-crawler/interface/BasicCrawlerOptions",
        "default": 10
      },
      "maxRequestsPerMinute": {
        "title": "maxRequestsPerMinute",
        "type": "integer",
        "description": "The maximum number of requests per minute the crawler should run. We can pass any positive, non-zero integer.",
        "example": 120,
        "prefill": 120,
        "minimum": 1,
        "nullable": true
      },
      "maxRequestsPerCrawl": {
        "title": "maxRequestsPerCrawl",
        "type": "integer",
        "description": "Maximum number of pages that the crawler will open. The crawl will stop when this limit is reached.\n    <br/> <strong>NOTE:</strong> In cases of parallel crawling, the actual number of pages visited might be slightly higher than this value.",
        "minimum": 1,
        "nullable": true
      },
      "minConcurrency": {
        "title": "minConcurrency",
        "type": "integer",
        "description": "Sets the minimum concurrency (parallelism) for the crawl.<br/>\n    <strong>WARNING:</strong> If we set this value too high with respect to the available system memory and CPU, our crawler will run extremely slow or crash. If not sure, it's better to keep the default value and the concurrency will scale up automatically.",
        "example": 1,
        "prefill": 1,
        "minimum": 1,
        "nullable": true
      },
      "maxConcurrency": {
        "title": "maxConcurrency",
        "type": "integer",
        "description": "Sets the maximum concurrency (parallelism) for the crawl.",
        "minimum": 1,
        "nullable": true,
        "default": 5,
        "prefill": 5
      },
      "navigationTimeoutSecs": {
        "title": "navigationTimeoutSecs",
        "type": "integer",
        "description": "Timeout in which the HTTP request to the resource needs to finish, given in seconds.",
        "minimum": 0,
        "nullable": true
      },
      "requestHandlerTimeoutSecs": {
        "title": "requestHandlerTimeoutSecs",
        "type": "integer",
        "description": "Timeout in which the function passed as <a href=\"https://crawlee.dev/api/basic-crawler/interface/BasicCrawlerOptions#requestHandler\">BasicCrawlerOptions.requestHandler</a> needs to finish, in seconds.",
        "example": 180,
        "prefill": 14400,
        "minimum": 0,
        "nullable": true
      },
      "keepAlive": {
        "title": "keepAlive",
        "type": "boolean",
        "description": "Allows to keep the crawler alive even if the RequestQueue gets empty. With keepAlive: true the crawler will keep running, waiting for more requests to come.",
        "nullable": true
      },
      "ignoreSslErrors": {
        "title": "ignoreSslErrors",
        "type": "boolean",
        "description": "If set to true, SSL certificate errors will be ignored.",
        "nullable": true
      },
      "additionalMimeTypes": {
        "title": "additionalMimeTypes",
        "type": "array",
        "description": "An array of MIME types you want the crawler to load and process. By default, only text/html and application/xhtml+xml MIME types are supported.",
        "editor": "stringList",
        "uniqueItems": true,
        "nullable": true
      },
      "suggestResponseEncoding": {
        "title": "suggestResponseEncoding",
        "type": "string",
        "description": "By default this crawler will extract correct encoding from the HTTP response headers. There are some websites which use invalid headers. Those are encoded using the UTF-8 encoding. If those sites actually use a different encoding, the response will be corrupted. You can use suggestResponseEncoding to fall back to a certain encoding, if you know that your target website uses it. To force a certain encoding, disregarding the response headers, use forceResponseEncoding.",
        "editor": "textfield",
        "nullable": true
      },
      "forceResponseEncoding": {
        "title": "forceResponseEncoding",
        "type": "string",
        "description": "By default this crawler will extract correct encoding from the HTTP response headers. Use forceResponseEncoding to force a certain encoding, disregarding the response headers. To only provide a default for missing encodings, use suggestResponseEncoding.",
        "editor": "textfield",
        "nullable": true
      },
      "perfBatchSize": {
        "title": "Batch requests",
        "type": "integer",
        "description": "If set, multiple Requests will be handled by a single Actor instance.<br/>\n       Example: If set to 20, then up to 20 requests will be handled in a single \"go\", after which the actor instance will reset.<br/>\n       <a href=\"https://docs.apify.com/platform/actors/development/performance#batch-jobs-win-over-the-single-jobs\">See Apify documentation</a>.",
        "example": 20,
        "minimum": 0,
        "nullable": true,
        "sectionCaption": "Performance configuration (Advanced)",
        "sectionDescription": "Standalone performance options. These are not passed to the Crawler."
      },
      "perfBatchWaitSecs": {
        "title": "Wait (in seconds) between processing requests in a single batch",
        "type": "integer",
        "description": "How long to wait between entries within a single batch.<br/>\n      Increase this value if you're using batching and you're sending requests to the scraped website too fast.<br/>\n      Example: If set to 1, then after each entry in a batch, wait 1 second before continuing.",
        "example": 1,
        "minimum": 0,
        "nullable": true
      },
      "logLevel": {
        "title": "Log Level",
        "type": "string",
        "editor": "select",
        "description": "Select how detailed should be the logging.",
        "enum": [
          "off",
          "debug",
          "info",
          "warn",
          "error"
        ],
        "enumTitles": [
          "No logging (off)",
          "Debug and higher priority",
          "Info and higher priority",
          "Warning and higher priority",
          "Error and higher priority"
        ],
        "example": "info",
        "prefill": "info",
        "default": "info",
        "nullable": true,
        "sectionCaption": "Logging & Error handling (Advanced)",
        "sectionDescription": "Configure how to handle errors or what should be displayed in the log console."
      },
      "errorReportingDatasetId": {
        "title": "Error reporting dataset ID",
        "type": "string",
        "editor": "textfield",
        "description": "Dataset ID to which errors should be captured.<br/>\n    Default: `'REPORTING'`.<br/>\n    <strong>NOTE:</strong> Dataset name can only contain letters 'a' through 'z', the digits '0' through '9', and the hyphen ('-') but only in the middle of the string (e.g. 'my-value-1')",
        "example": "REPORTING",
        "prefill": "REPORTING",
        "default": "REPORTING",
        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-]*$",
        "nullable": true
      },
      "errorSendToSentry": {
        "title": "Send errors to Sentry",
        "type": "boolean",
        "editor": "checkbox",
        "description": "Whether to send actor error reports to <a href=\"https://sentry.io/\">Sentry</a>.<br/>\n    This info is used by the author of this actor to identify broken integrations,\n    and track down and fix issues.",
        "example": true,
        "default": true,
        "nullable": true
      },
      "metamorphActorId": {
        "title": "Metamorph actor ID - metamorph to another actor at the end",
        "type": "string",
        "description": "Use this option if you want to run another actor with the same dataset after this actor has finished (AKA metamorph into another actor). <a href=\"https://docs.apify.com/sdk/python/docs/concepts/interacting-with-other-actors#actormetamorph\">Learn more</a> <br/>\n    New actor is identified by its ID, e.g. \"apify/web-scraper\".",
        "editor": "textfield",
        "example": "apify/web-scraper",
        "nullable": true,
        "sectionCaption": "Integrations (Metamorphing) (Advanced)"
      },
      "metamorphActorBuild": {
        "title": "Metamorph actor build",
        "type": "string",
        "description": "Tag or number of the target actor build to metamorph into (e.g. 'beta' or '1.2.345')",
        "editor": "textfield",
        "example": "1.2.345",
        "nullable": true
      },
      "metamorphActorInput": {
        "title": "Metamorph actor input",
        "type": "object",
        "description": "Input object passed to the follow-up (metamorph) actor. <a href=\"https://docs.apify.com/sdk/python/docs/concepts/interacting-with-other-actors#actormetamorph\">Learn more</a>",
        "editor": "json",
        "example": {
          "uploadDatasetToGDrive": true
        },
        "nullable": true
      }
    }
  },
  "storages": {
    "dataset": {
      "actorSpecification": 1,
      "fields": {},
      "views": {}
    }
  }
}